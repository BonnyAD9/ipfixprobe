/*!
 * \file parser.h
 * \brief Packet metadata parser from network Ethernet frames or semicolon separated string for NetFlow Monitor example.
 * \author Lukas Kekely <kekely@cesnet.cz>
 * \date 2015
 */
/*
 * Copyright (C) 2015 CESNET
 *
 * LICENSE TERMS
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name of the Company nor the names of its contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * ALTERNATIVELY, provided that this notice is retained in full, this
 * product may be distributed under the terms of the GNU General Public
 * License (GPL) version 2 or later, in which case the provisions
 * of the GPL apply INSTEAD OF those given above.
 *
 * This software is provided ``as is'', and any express or implied
 * warranties, including, but not limited to, the implied warranties of
 * merchantability and fitness for a particular purpose are disclaimed.
 * In no event shall the company or contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential
 * damages (including, but not limited to, procurement of substitute
 * goods or services; loss of use, data, or profits; or business
 * interruption) however caused and on any theory of liability, whether
 * in contract, strict liability, or tort (including negligence or
 * otherwise) arising in any way out of the use of this software, even
 * if advised of the possibility of such damage.
 *
 */

#ifndef __HEADER_FILE_PARSER
#define __HEADER_FILE_PARSER



/**
 * \brief IPv4 or IPv6 address.
 */
typedef union ip_addr {
    uint8_t addr8[16]; //!< IP address data as array of bytes.
    uint16_t addr16[8]; //!< IP address data as array of two-byte values.
    uint32_t addr32[4]; //!< IP address data as array of four-byte values.
    uint64_t addr64[2]; //!< IP address data as array of eight-byte values.
} __attribute__((__packed__)) ip_addr;


/**
         * \brief Flow record identification fields.
         */
typedef struct flowKey{
    ip_addr sip; //!< Source IPv4 or IPv6 address.
    ip_addr dip; //!< Destination IPv4 or IPv6 address.
    uint16_t sport; //!< Source UDP/TCP port number.
    uint16_t dport; //!< Destination UDP/TCP port number.
    uint8_t ipver; //!< Layer 3 protocol identification (version of IP).
    uint8_t proto; //!< Layer 4 protocol number.
    uint8_t ifc; //!< Input interface number.
} __attribute__((__packed__)) flowKey;

/**
         * \brief Flow record aggregated data fields.
         */
typedef struct flowData{
    uint64_t bytes; //!< Counter of flow bytes.
    uint64_t packets; //!< Counter of flow packets.
    uint32_t stime_nsec; //!< Start of flow timestamp - nanoseconds part.
    uint32_t stime_sec; //!< Start of flow timestamp - seconds part.
    uint32_t etime_nsec; //!< End of flow timestamp - nanoseconds part.
    uint32_t etime_sec; //!< End of flow timestamp - seconds part.
    uint8_t tcpflags; //!< Agregated TCP flags from flow packets.
} __attribute__((__packed__)) flowData;

/**
 * \brief Format of NDP header of data received from NSF firmware.
 */
typedef struct nsf_ndphdr {
    uint8_t  interface : 4; //!< Interface number on which the data was captured.
    uint8_t  dma_channel : 4; //!< DMA channel.
    uint8_t  crc_hash : 4; //!< Precomputed CRC hash (4 bits).
    uint8_t  data_type : 4; //!< Format of data that follow this header.
    uint16_t frame_size; //!< Size of captured frame.
    uint32_t timestamp_nsec; //!< Nanoseconds part of capture timestamp.
    uint32_t timestamp_sec; //!< Seconds part of capture timestamp.
} __attribute__((__packed__)) nsf_ndphdr;

#define NDPHDR_DATA_TYPE_FRAME 0 //!< Format of data captured from NSF firmware: full network packet.
#define NDPHDR_DATA_TYPE_UH    1 //!< Format of data captured from NSF firmware: Unified Header - data extracted from a single packet.
#define NDPHDR_DATA_TYPE_FLOW  2 //!< Format of data captured from NSF firmware: NetFlow record - data aggregated in firmware from packets of one flow.



/**
 * \brief Format of Unified Header received from NSF firmware.
 */
typedef struct nsf_header {
    ip_addr l3_srcaddr; //!< Source IPv4 or IPv6 address.
    ip_addr l3_dstaddr; //!< Destination IPv4 or IPv6 address.
    uint32_t flow_octets; //!< Size of packet or frame in bytes (lower 32 bits).
    uint8_t flow_octets_high; //!< Size of packet or frame in bytes (highest 8 bits).
    uint8_t l3_protocol; //!< Layer 3 protocol identification (version of IP).
    uint8_t l4_protocol; //!< Layer 4 protocol number.
    uint8_t l4_tcpflags; //!< TCP flags.
    uint16_t l4_srcport; //!< Source UDP/TCP port number.
    uint16_t l4_dstport; //!< Destination UDP/TCP port number.
} __attribute__((__packed__)) nsf_header;

/**
 * \brief Format of flow record received from NSF firmware.
 *
 * Note that first fields are the same as in the format of Unified Header, only last 3 fields are added here.
 */
typedef struct nsf_record {
    ip_addr l3_srcaddr; //!< Source IPv4 or IPv6 address.
    ip_addr l3_dstaddr; //!< Destination IPv4 or IPv6 address.
    uint32_t flow_octets; //!< Total size of packets or frames in bytes (lower 32 bits).
    uint8_t flow_octets_high; //!< Total size of packets or frames in bytes (highest 8 bits).
    uint8_t l3_protocol; //!< Layer 3 protocol identification (version of IP).
    uint8_t l4_protocol; //!< Layer 4 protocol number.
    uint8_t l4_tcpflags; //!< TCP flags (aggregated by logical OR).
    uint16_t l4_srcport; //!< Source UDP/TCP port number.
    uint16_t l4_dstport; //!< Destination UDP/TCP port number.
    uint32_t flow_packets; //!< Number of packets or frames aggregated in the record.
    uint32_t timestamp_nsec; //!< Nanoseconds part of first captured packet timestamp.
    uint32_t timestamp_sec; //!< Seconds part of first captured packet timestamp.
} __attribute__((__packed__)) nsf_record;



#endif
