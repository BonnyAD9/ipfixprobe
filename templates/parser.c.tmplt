/**
 * \file parser.c
 * \date 2019
 * \author Jiri Havranek <havranek@cesnet.cz>
 */
/*
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name of the Company nor the names of its contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.

 * This software is provided ``as is'', and any express or implied
 * warranties, including, but not limited to, the implied warranties of
 * merchantability and fitness for a particular purpose are disclaimed.
 * In no event shall the company or contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential
 * damages (including, but not limited to, procurement of substitute
 * goods or services; loss of use, data, or profits; or business
 * interruption) however caused and on any theory of liability, whether
 * in contract, strict liability, or tort (including negligence or
 * otherwise) arising in any way out of the use of this software, even
 * if advised of the possibility of such damage.
*/

#include <stdint.h>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>

#include "types.h"
#include "parser.h"

{{ return_codes/type_name }} fpp_parse_packet(struct fpp_parser_s *parser, {{ packet_var/type_name }} {{ packet_var/name }}, {{ packet_len_var/type_name }} {{ packet_len_var/name }}, {{ out_headers/type_name }} {{ out_headers/name}})
{ {% for var in local_variables %}
   {{ var/type_name }} {{ var/name }}{% if existsIn(var, "array") %}[{{ var/array_size }}]{% endif %}{% if existsIn(var, "initializer") %} = {{ var/initializer }}{% endif %};{% endfor %}
   {{ parsed_headers/type_name }} {{ parsed_headers/name }};

{% for var in local_variables %}
   (void) {{ var/name }};{% endfor %}
{% for field in parsed_headers/fields %}
   {{parsed_headers/name}}.{{ field/name }} = NULL;{% endfor %}

   *{{ out_headers/name }} = NULL;
   goto start;{% for state in states %}
{{ state/name }}:
   { {% if existsIn(state, "statements") %}{% for statement in state/statements %}
      {{ statement }}{% endfor %}
{% endif %}
      {% if not state/direct_transition %}switch ({{ state/select_cond }}) { {% for case in state/select_cases %}
         {% if case/default %}default:{% else %}case {{ case/cond }}:{% endif %} goto {{ case/destination }};{% endfor %}
      }
      goto exit;{% else %}goto {{ state/next_state }};{% endif %}
   }{% endfor %}


accept:
   return NoError;
reject:
exit:
   return fpp_error_code;
}

void fpp_init(struct fpp_parser_s *parser)
{
   memset(parser, 0, sizeof(struct fpp_parser_s));
}
void fpp_free(struct fpp_parser_s *parser, struct packet_hdr_s *headers)
{
   while (headers != NULL) {
      parser->hdr_counts[headers->type]--;
      parser->link_count--;
      headers = headers->next;
   }
}
void fpp_clear(struct fpp_parser_s *parser)
{
   memset(parser, 0, sizeof(struct fpp_parser_s));
}
