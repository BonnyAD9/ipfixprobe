/*!
 * \file parser.h
 * \brief Packet metadata parser from network Ethernet frames or semicolon separated string for NetFlow Monitor example.
 * \author Lukas Kekely <kekely@cesnet.cz>
 * \date 2015
 */
/*
 * Copyright (C) 2015 CESNET
 *
 * LICENSE TERMS
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 * 1. Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 * 2. Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in
 *    the documentation and/or other materials provided with the
 *    distribution.
 * 3. Neither the name of the Company nor the names of its contributors
 *    may be used to endorse or promote products derived from this
 *    software without specific prior written permission.
 *
 * ALTERNATIVELY, provided that this notice is retained in full, this
 * product may be distributed under the terms of the GNU General Public
 * License (GPL) version 2 or later, in which case the provisions
 * of the GPL apply INSTEAD OF those given above.
 *
 * This software is provided ``as is'', and any express or implied
 * warranties, including, but not limited to, the implied warranties of
 * merchantability and fitness for a particular purpose are disclaimed.
 * In no event shall the company or contributors be liable for any
 * direct, indirect, incidental, special, exemplary, or consequential
 * damages (including, but not limited to, procurement of substitute
 * goods or services; loss of use, data, or profits; or business
 * interruption) however caused and on any theory of liability, whether
 * in contract, strict liability, or tort (including negligence or
 * otherwise) arising in any way out of the use of this software, even
 * if advised of the possibility of such damage.
 *
 */

#ifndef __HEADER_FILE_PARSER
#define __HEADER_FILE_PARSER

#include "sdm-types.h"

/**
 * \brief Information about network flow (one flow cache record).
 */
class flowRecord {

    public:

        /**
         * \brief Parse flow record fields from captured NSF transaction.
         * @param packet Captured packet from NDP (NDP header with frame, header or flow record).
         * @param cnts Statistics counters, where parsed transaction will be acounted.
         * @return Type of NSF received data: 0 means packet, 1 means header and 2 means flow record.
         */
        inline int from_nsf(struct ndp_packet &packet/*, statCounters &cnts*/);
        flowKey key; //!< Flow record identification fields.
        flowData data; //!< Flow record aggregated data fields.

    private:

        /**
         * \brief Internal part of data parser: Unified Header format parsing.
         * @param d Start of UH data.
         * @param len Length of UH data.
         */
        __always_inline void parse_uh(unsigned char *d, unsigned len);

        /**
         * \brief Internal part of data parser: flow record firmware format parsing.
         * @param d Start of flow data.
         * @param len Length of flow data.
         */
        __always_inline void parse_flow(unsigned char *d, unsigned len);

};

inline int flowRecord::from_nsf(struct ndp_packet &packet/*, statCounters &cnts*/) {
    nsf_ndphdr *ndphdr; // NDP frame header
    ndphdr = (nsf_ndphdr *) packet.header;

    switch(ndphdr->data_type) {
        case NDPHDR_DATA_TYPE_FRAME:
            this->data.packets = 1; // fill implicit filed values for single frame
            this->data.bytes = packet.data_length; // captured frame length gets changed to packet length for IP traffic
            this->data.tcpflags = 0;
            this->data.etime_nsec = le32toh(ndphdr->timestamp_nsec);
            this->data.etime_sec = le32toh(ndphdr->timestamp_sec);
            this->data.stime_nsec = this->data.etime_nsec;
            this->data.stime_sec = this->data.etime_sec;
            memset((unsigned char *)&this->key, 0, sizeof(flowRecord::flowKey));
            this->key.ifc = ndphdr->interface;
            //parse_eth(packet.data, packet.data_length); // start frame parsing from Ethernet header
            //cnts.packets++;
            break;
        case NDPHDR_DATA_TYPE_UH:
            this->data.packets = 1; // fill implicit values for single frame header
            this->key.ifc = ndphdr->interface;
            this->data.etime_nsec = le32toh(ndphdr->timestamp_nsec);
            this->data.etime_sec = le32toh(ndphdr->timestamp_sec);
            this->data.stime_nsec = this->data.etime_nsec;
            this->data.stime_sec = this->data.etime_sec;
            parse_uh(packet.data, packet.data_length);
            //cnts.headers++;
            break;
        case NDPHDR_DATA_TYPE_FLOW:
            this->key.ifc = ndphdr->interface;
            this->data.etime_nsec = le32toh(ndphdr->timestamp_nsec);
            this->data.etime_sec = le32toh(ndphdr->timestamp_sec);
            parse_flow(packet.data, packet.data_length);
            //cnts.flow_records++;
            //cnts.flow_packets += this->data.packets;
            break;
    }
    return ndphdr->data_type;
}

__always_inline void flowRecord::parse_uh(unsigned char *d, unsigned) {
    nsf_header *h = (nsf_header *)d;
    memcpy(key.sip.addr8, h->l3_srcaddr.addr8, 16);
    memcpy(key.dip.addr8, h->l3_dstaddr.addr8, 16);
    data.bytes = h->flow_octets;
    key.ipver = h->l3_protocol;
    key.proto = h->l4_protocol;
    data.tcpflags = h->l4_tcpflags;
    if(key.proto == IPPROTO_TCP || key.proto == IPPROTO_UDP) { // TCP or UDP port numbers
        key.sport =  h->l4_srcport;
        key.dport = h->l4_dstport;
    }
}

__always_inline void flowRecord::parse_flow(unsigned char *d, unsigned) {
    nsf_record *h = (nsf_record *)d;
    memcpy(key.sip.addr8, h->l3_srcaddr.addr8, 16);
    memcpy(key.dip.addr8, h->l3_dstaddr.addr8, 16);
    data.bytes = le32toh(h->flow_octets);
    key.ipver = h->l3_protocol;
    key.proto = h->l4_protocol;
    data.tcpflags = h->l4_tcpflags;
    if(key.proto == IPPROTO_TCP || key.proto == IPPROTO_UDP) { // TCP or UDP port numbers
        key.sport = h->l4_srcport;
        key.dport = h->l4_dstport;
    }
    data.packets = le32toh(h->flow_packets);
    data.stime_nsec = le32toh(h->timestamp_nsec);
    data.stime_sec = le32toh(h->timestamp_sec);
}

#endif
